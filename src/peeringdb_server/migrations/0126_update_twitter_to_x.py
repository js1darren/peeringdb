# Generated by Django 4.2.10 on 2024-03-27 12:10

import django_peeringdb.fields
from django.db import migrations


def update_twitter_to_x(apps, schema_editor):
    models_names = [
        "Organization",
        "Campus",
        "Facility",
        "InternetExchange",
        "Network",
        "Carrier",
    ]
    for model_name in models_names:
        model_class = apps.get_model("peeringdb_server", model_name)
        # Set auto_now to False to avoid updating the updated field when
        model_class._meta.get_field("updated").auto_now = False
        model_has_social_media = model_class.handleref.filter(
            social_media__isnull=False
        ).exclude(social_media=[])
        for instance in model_has_social_media:
            for social_media in instance.social_media:
                if social_media.get("service") == "twitter":
                    print(
                        f"{model_name} {instance.id} : Updating social_media service from twitter to x"
                    )
                    social_media["service"] = "x"
                    instance.save()


def reverse_code(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("peeringdb_server", "0125_amr"),
    ]

    operations = [
        migrations.AlterField(
            model_name="facility",
            name="available_voltage_services",
            field=django_peeringdb.fields.MultipleChoiceField(
                blank=True,
                choices=[
                    ("48 VDC", "48 VDC"),
                    ("400 VAC", "400 VAC"),
                    ("480 VAC", "480 VAC"),
                ],
                help_text="The alternating current voltage available to users of the facility either directly from the landlord or delivered by the utility separately.",
                max_length=255,
                null=True,
                verbose_name="Available Voltage Services",
            ),
        ),
        migrations.RunPython(update_twitter_to_x, reverse_code),
    ]
